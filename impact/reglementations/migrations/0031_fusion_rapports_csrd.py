# Generated by Django 5.1.9 on 2025-05-21 09:29
from django.db import migrations
from django.db.models.aggregates import Count

"""
Permet la fusion des rapports CSRD (personnels vers principaux) :
 - traitement par année (2024 et 2025),
 - pour les entreprises sans rapport principal : avec un lien de publication et/ou par date de modification,
 - les anciens rapports personnels ne sont pas supprimés pour le moment (support éventuel).
"""


class Migration(migrations.Migration):
    dependencies = [
        ("reglementations", "0030_documentanalyseia"),
    ]

    def fusion_personnels_en_principaux(apps, schema_editor):
        RapportCSRD = apps.get_model("reglementations", "RapportCSRD")

        # pour l'instant les rapports CSRD personnels restent en base
        # mais ne seront plus directement accessibles.
        # Une deuxième migration pourra permettre leur suppression, éventuellement
        for annee in ("2024", "2025"):
            # les entreprises à exclure : avec un rapport officiel
            ids_entreprises_avec_rapport_officiel = (
                RapportCSRD.objects.filter(annee=annee, proprietaire=None)
                .values_list("entreprise_id", flat=True)
                .distinct()
            )
            # pour chaque année, on récupère les entreprises n'ayant pas de rapport officiel
            ids_entreprises_sans_rapport_officiel = (
                RapportCSRD.objects.filter(annee=annee)
                .exclude(entreprise_id__in=ids_entreprises_avec_rapport_officiel)
                .values_list("entreprise_id", flat=True)
                .distinct()
            )

            print(
                f"> {annee} : {len(ids_entreprises_sans_rapport_officiel)} entreprise(s) sans rapport officiel :"
            )

            for id_entreprise in ids_entreprises_sans_rapport_officiel:
                rapports_personnels = (
                    RapportCSRD.objects.filter(entreprise_id=id_entreprise, annee=annee)
                    .annotate(Count("enjeux__materiel"))
                    .annotate(Count("enjeux__selection"))
                    .order_by(
                        "-lien_rapport",
                        "-enjeux__materiel__count",
                        "-enjeux__selection__count",
                    )
                )
                # on prends le premier de chaque bloc trié par :
                # - présence d'un lien de publication
                # - et / ou nombre d'enjeux matériels selectionnés
                # - et / ou nombre d'enjeux modifiés
                # et il devient le rapport principal pour l'année donnée
                if premier_rapport := rapports_personnels.first():
                    premier_rapport.proprietaire = None
                    print(
                        f"  > changement en rapport officiel : PK entreprise:{id_entreprise}, rapport: {premier_rapport.pk}"
                    )
                    premier_rapport.save()
                    continue

    operations = [
        migrations.RunPython(fusion_personnels_en_principaux, migrations.RunPython.noop)
    ]
