# Generated by Django 5.1.9 on 2025-05-21 15:38
from django.db import migrations


class Migration(migrations.Migration):
    def fusion_bdese_personnelles(apps, schema_editor):
        Bdese300 = apps.get_model("reglementations", "BDESE_300")
        Bdese50_300 = apps.get_model("reglementations", "BDESE_50_300")
        BdeseAvecAccord = apps.get_model("reglementations", "BDESEAvecAccord")

        # même principe que la migration de fusion des rapports CSRD :
        # on identifie les BDESE par année et on selectionne un rapport principal
        # mais pour les 3 classes existantes.

        for clazz in [BdeseAvecAccord, Bdese300, Bdese50_300]:
            print("Classe:", clazz)
            for annee in [str(a) for a in range(2020, 2028)]:
                print("année:", annee)
                entreprises = (
                    clazz.objects.filter(annee=annee)
                    .exclude(user=None)
                    .select_related("entreprise")
                    .values_list("entreprise", flat=True)
                    .distinct()
                )
                for entreprise in entreprises:
                    print("entreprise:", entreprise)
                    bdese_personnelles = clazz.objects.filter(
                        annee=annee, entreprise=entreprise
                    ).order_by("-updated_at")

                    def _sort_fn(bdese):
                        # fonction de tri des BDESE :
                        # les critères ne sont pas de simples champs SQL
                        # on peut utiliser +/- pour des critères numériques pour simuler le ASC/DESC SQL
                        base_criteria = ()

                        if hasattr(clazz, "is_configured"):
                            base_criteria += (0 if bdese.is_configured else 1,)

                        if hasattr(clazz, "nb_etapes_completees"):
                            base_criteria += (-bdese.nb_etapes_completees(),)

                        # worst-case scenario :
                        # si impossible de définir une priorité / pertinence (complétion)
                        # alors on prends la maj la plus récente
                        base_criteria += (-int(bdese.updated_at.timestamp()),)

                        return base_criteria

                    bdese_personnelles = sorted(bdese_personnelles, key=_sort_fn)

                    if premiere_bdese := bdese_personnelles[0]:
                        print("BDESE principale:", premiere_bdese)
                        continue

    dependencies = [
        ("reglementations", "0031_fusion_rapports_csrd"),
    ]

    def _undo(apps, schema_editor):
        print("Ok!")

    operations = [migrations.RunPython(fusion_bdese_personnelles, _undo)]
