# Generated by Django 5.1.9 on 2025-05-21 15:38
from django.db import migrations

from reglementations.models import BDESE_300
from reglementations.models import BDESE_50_300
from reglementations.models import BDESEAvecAccord

# note:
# pour différents problèmes de wrapper, on n'utilise pas
# les modèles de classes versionnés, par ex. obtenus avec :
#   Bdese300 = apps.get_model("reglementations", "BDESE_300")
#   Bdese50_300 = apps.get_model("reglementations", "BDESE_50_300")
#   BdeseAvecAccord = apps.get_model("reglementations", "BDESEAvecAccord")
# mais plutôt directement les classes de modèles, puisqu'aucune modification
# n'est effectuée sur leur structure.
# Cette manipulation est nécessaire pour pouvoir accéder dynamiquement aux méthodes :
# - nb_etapes_completees
# - is_configured
# pour les tris manuels sur les objets.
# car ces méthodes *ne sont pas accessibles* sur les objets wrappés en sortie des querysets.


class Migration(migrations.Migration):
    def fusion_bdese_personnelles(apps, schema_editor):
        # Bdese300 = apps.get_model("reglementations", "BDESE_300")
        # Bdese50_300 = apps.get_model("reglementations", "BDESE_50_300")
        # BdeseAvecAccord = apps.get_model("reglementations", "BDESEAvecAccord")
        #
        # même principe que la migration de fusion des rapports CSRD :
        # on identifie les BDESE par année et on selectionne un rapport principal
        # mais pour les 3 classes existantes.
        for clazz in [BDESEAvecAccord, BDESE_300, BDESE_50_300]:
            for annee in range(2020, 2028):
                ids_entreprises_bdese_officielle = (
                    clazz.objects.filter(annee=annee, user=None)
                    .values_list("entreprise_id", flat=True)
                    .distinct()
                )
                ids_entreprises_bdese_personnelle = (
                    clazz.objects.filter(
                        annee=annee,
                    )
                    .exclude(entreprise_id__in=ids_entreprises_bdese_officielle)
                    .values_list("entreprise_id", flat=True)
                    .distinct()
                )

                print(f"> Classe : {clazz.__name__} - année : {annee}")

                # dans la plupart des cas, les BDESE ne seront pas triées via l'ORM,
                # mais via des propriétés
                for entreprise_id in ids_entreprises_bdese_personnelle:
                    bdese_personnelles = clazz.objects.filter(
                        annee=annee, entreprise=entreprise_id
                    )

                    def _sort_fn(bdese):
                        # fonction de tri des BDESE :
                        # les critères ne sont pas de simples champs SQL
                        # on peut utiliser +/- pour des critères numériques pour simuler le ASC/DESC SQL
                        base_criteria = ()

                        if hasattr(clazz, "is_configured"):
                            base_criteria += (0 if bdese.is_configured else 1,)

                        if hasattr(clazz, "nb_etapes_completees"):
                            base_criteria += (-bdese.nb_etapes_completees(),)

                        # worst-case scenario :
                        # si impossible de définir une priorité / pertinence (complétion)
                        # alors on prends la maj la plus récente
                        base_criteria += (-int(bdese.updated_at.timestamp()),)

                        return base_criteria

                    bdese_personnelles = sorted(bdese_personnelles, key=_sort_fn)

                    if premiere_bdese := bdese_personnelles[0]:
                        print(
                            f" > PK entreprise {entreprise_id}, BDESE sélectionnée : {premiere_bdese.pk} (total: {len(bdese_personnelles)})"
                        )
                        premiere_bdese.user = None
                        premiere_bdese.save()
                        continue

    dependencies = [
        ("reglementations", "0031_fusion_rapports_csrd"),
    ]

    operations = [
        migrations.RunPython(fusion_bdese_personnelles, migrations.RunPython.noop)
    ]
