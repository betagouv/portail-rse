"""
Django settings for Portail RSE project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url
from corsheaders.defaults import default_headers
from csp.constants import NONCE
from csp.constants import SELF
from csp.constants import UNSAFE_INLINE
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "False") == "True"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "0.0.0.0,127.0.0.1,localhost").split(
    ","
)

# Application definition
INSTALLED_APPS = [
    "api",
    "entreprises",
    "habilitations",
    "invitations",
    "metabase",
    "public",
    "reglementations",
    "vsme",
    "users",
    "utils",
    "logs",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_vite",
    "anymail",
    "corsheaders",
    "django_hosts",
]
MIDDLEWARE = [
    # django-hosts : doit être au début
    "django_hosts.middleware.HostsRequestMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # ajout d'informations à l'utilisateur juste après l'identification
    "utils.middlewares.ExtendUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # middlewares touchant à l'utilisation d'HTMX
    "utils.middlewares.HTMXRequestMiddleware",
    "utils.middlewares.HTMXRetargetMiddleware",
    # django-hosts : doit être à la fin
    "django_hosts.middleware.HostsResponseMiddleware",
]
ROOT_URLCONF = "impact.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "entreprises.context_processors.current_entreprise",
                "utils.context_processors.custom_settings",
                "habilitations.context_processors.habilitation",
            ],
        },
    },
]
WSGI_APPLICATION = "impact.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
METABASE = os.getenv("METABASE_DATABASE_URL")
METABASE_DATABASE_NAME = "metabase"

DATABASES = {
    "default": dj_database_url.config("DATABASE_URL"),
    METABASE_DATABASE_NAME: dj_database_url.config(
        "METABASE_DATABASE_URL" if METABASE else "DATABASE_URL"
    ),
}

DATABASE_ROUTERS = ["impact.db_routers.MetabaseRouter"]

# Storages
MEDIA_ROOT = Path(BASE_DIR, "media")
MEDIA_URL = "media/"
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}
if os.getenv("S3_STORAGE"):
    access_key = os.getenv("SCALEWAY_S3_ACCESS_KEY")
    secret_key = os.getenv("SCALEWAY_S3_SECRET_KEY")
    if not access_key or not secret_key:
        raise ImproperlyConfigured("Missing S3 credentials")
    region_name = os.getenv("SCALEWAY_S3_BUCKET_REGION")
    bucket_name = os.getenv("SCALEWAY_S3_BUCKET_NAME")
    endpoint_url = os.getenv(
        "SCALEWAY_S3_ENDPOINT_URL", f"https://s3.{region_name}.scw.cloud"
    )
    STORAGES["default"] = {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key": access_key,
            "secret_key": secret_key,
            "bucket_name": bucket_name,
            "region_name": region_name,
            "endpoint_url": endpoint_url,
        },
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "impact.password_validation.CompositionPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = "fr-FR"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Sessions
# https://docs.djangoproject.com/en/4.2/topics/http/sessions/

# Cookie expiration : 2h
SESSION_COOKIE_AGE = 2 * 60 * 60

# Via HTTPS only
SESSION_COOKIE_SECURE = True

# Session expires when browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

COOKIE_DOMAIN = os.getenv("COOKIE_DOMAIN", "")

# SameSite :
# must be "Strict", other sites do not need to see session cookies
# TO BE CONFIRMED ...
# see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
# SESSION_COOKIE_SAMESITE = "Strict"

# Django-vite configuration for static files build with vite
# https://github.com/MrBin99/django-vite
DJANGO_VITE = {
    "default": {
        "dev_mode": DEBUG,
        "manifest_path": Path(BASE_DIR, "static/svelte/manifest.json"),
        "dev_server_port": 5173,
        "static_url_prefix": "svelte",
    }
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = Path(BASE_DIR, "static_collected")
STATIC_URL = "/static/"
STATICFILES_DIRS = (Path(BASE_DIR, "static"),)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email
BREVO_API_KEY = os.getenv("BREVO_API_KEY")
EMAIL_BACKEND = (
    "anymail.backends.brevo.EmailBackend"
    if BREVO_API_KEY
    else "django.core.mail.backends.console.EmailBackend"
)
ANYMAIL = {"BREVO_API_KEY": BREVO_API_KEY}
DEFAULT_FROM_EMAIL = "ne-pas-repondre@portail-rse.beta.gouv.fr"
CONTACT_EMAIL = os.getenv("CONTACT_EMAIL")
SUPPORT_EMAIL = "contact@portail-rse.beta.gouv.fr"
BREVO_CONFIRMATION_EMAIL_TEMPLATE = 1
BREVO_RESULTAT_ANALYSE_IA_TEMPLATE = 65
BREVO_INVITATION_TEMPLATE = 82
BREVO_AJOUT_MEMBRE_TEMPLATE = 84

# Users
AUTH_USER_MODEL = "users.User"
LOGIN_URL = "/connexion"
LOGIN_REDIRECT_URL = "/tableau-de-bord"
LOGOUT_REDIRECT_URL = "/"

# Invitations
INVITATION_MAX_AGE = int(
    os.getenv("INVITATION_MAX_AGE", 60 * 60 * 24 * 30)
)  # en secondes, 30 jours par défaut

# Entreprise test
# On permet l'utilisation d'une entreprise fictive de test créée manuellement en base
# pour des utilisateurs potentiels qui n'ont pas d'entreprise mais qui souhaitent tester le portail
# et s'inscrire avec cette entreprise test, comme les étudiants par exemple
SIREN_ENTREPRISE_TEST = "000000001"

# Délai avant suppression de l'habilitation sur l'entreprise test
MAX_JOURS_HABILITATION = 30

# Sentry
SENTRY_DSN = os.getenv("SENTRY_DSN")
SENTRY_ENV = os.getenv("SENTRY_ENV", "production")

if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=0.1,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        environment=SENTRY_ENV,
    )

# API
API_SIRENE_KEY = os.getenv("API_SIRENE_KEY")
API_ANALYSE_IA_BASE_URL = os.getenv("API_ANALYSE_IA_BASE_URL")
API_ANALYSE_IA_TOKEN = os.getenv("API_ANALYSE_IA_TOKEN", "")

# django-hosts :
# https://django-hosts.readthedocs.io/en/latest/
ROOT_HOSTCONF = "impact.hosts"
DEFAULT_HOST = "site"

# CNAME of the admin site
ADMIN_CNAME = os.getenv("ADMIN_CNAME", "admin")
# Matomo :
# Matomo can be disabled for DEV environments,
# and needs a special CSP configuration.
MATOMO_DISABLED = os.getenv("MATOMO_DISABLED") == "true"

# CSP :
# https://django-csp.readthedocs.io/en/latest
# - enabled on deployed apps
# - configuration in v4.0 format
# - can dynamically switch to "report-only" mode or disabled with `CSP_MODE` env-var
# see : https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy

# CSP_MODE : csp | csp-report-only | disabled
# - enabled, in "normal" mode (default)
# - enabled, in "report-only" mode (fine-tuning, non-blocking)
# - disabled (dev, if needed)
CSP_MODE = os.getenv("CSP_MODE") or "csp"

# CSP configuration base : same for CSP and report-only.
CSP_CONFIGURATION = {
    "DIRECTIVES": {
        "default-src": [
            SELF,
            "sentry.incubateur.net",
        ],
        "script-src": [
            SELF,
            "stats.portail-rse.beta.gouv.fr",
        ],
        "script-src-attr": [
            SELF,
            "stats.portail-rse.beta.gouv.fr",
        ],
        "frame-src": [
            SELF,
            "stats.portail-rse.beta.gouv.fr",
        ],
        "font-src": [
            SELF,
            "data:",  # Tarte au citron
        ],
        "script-src-elem": [
            SELF,
            NONCE,
            # matomo :
            "stats.beta.gouv.fr",
        ],
        "img-src": [
            SELF,
            "data:",  # some images are defined this way
            # matomo :
            "stats.beta.gouv.fr",
            # S3 scaleway :
            "sites-faciles.s3.fr-par.scw.cloud",
        ],
        "style-src": [
            SELF,
            UNSAFE_INLINE,  # stats: iframe
        ],
        "connect-src": [
            SELF,
            "sentry.incubateur.net",
            # matomo :
            "stats.beta.gouv.fr",
        ],
    },
}

# Allows CSP or CSP report-only to run correctly if enabled on a dev environment
# by adding connections to Svelte websockets and local server.
# Note: Sentry must have been properly setup before this section.
if DEBUG:
    CSP_CONFIGURATION["DIRECTIVES"] = {
        k: v + ["ws:", "localhost:*"]
        for k, v in CSP_CONFIGURATION["DIRECTIVES"].items()
    }

# Report URI : Sentry will log CSP violations to this URI if set
if SENTRY_SECURITY_HEADER_ENDPOINT := os.getenv("SENTRY_SECURITY_HEADER_ENDPOINT", ""):
    # `report-uri` directive is deprecated in favor of `report-to`
    # however django-csp CSP internal building is using it.
    # According to Sentry documentation, the report URI must pass a `sentry_environment`
    # request parameter for sorting-out CSP reports.
    # See : https://sentry.incubateur.net/organizations/betagouv/issues/118719/?project=75&query=is%3Aunresolved&referrer=issue-stream&statsPeriod=24h&stream_index=0
    CSP_CONFIGURATION["DIRECTIVES"]["report-uri"] = [
        SENTRY_SECURITY_HEADER_ENDPOINT + f"&sentry_environment={SENTRY_ENV}"
    ]
    # 'report-to' is a reference to a key of the map defined in the `Report-to` HTTP header
    # for future compatibility, but is currently *inactive* for most browsers by now (09.2024).
    # Uncomment when widely supported.
    # (see Sentry setup for value)
    # CSP_CONFIGURATION["DIRECTIVES"]["report-to"] = "csp-endpoint"

# Either CSP or CSP report-only is enabled, not both
match CSP_MODE:
    case "disabled":
        # nothing to do
        ...
    case "csp-report-only":
        CONTENT_SECURITY_POLICY_REPORT_ONLY = CSP_CONFIGURATION
    case "csp":
        CONTENT_SECURITY_POLICY = CSP_CONFIGURATION
    case _:
        raise ImproperlyConfigured(
            f"Incorrect CSP_MODE: '{CSP_MODE}' (must be one of: csp | csp-report-only | disabled)."
        )

if CSP_MODE != "disabled":
    # register django-csp app
    INSTALLED_APPS.append("csp")
    MIDDLEWARE.append("csp.middleware.CSPMiddleware")

if DEBUG_TOOLBAR := os.getenv("DEBUG_TOOLBAR"):
    INSTALLED_APPS.append("debug_toolbar")
    INTERNAL_IPS = ["127.0.0.1"]

    # DebugToolbarMiddleware doit être après HostsRequestMiddleware
    MIDDLEWARE.insert(
        MIDDLEWARE.index(
            "django_hosts.middleware.HostsRequestMiddleware",
        )
        + 1,
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    )

# Sites-faciles:
# URL of sites-faciles instance for Portail RSE
SITES_FACILES_BASE_URL = os.getenv(
    "SITES_FACILES_BASE_URL", "https://portail-rse.beta.gouv.fr"
)

# Élargissement autorisation CORS pour sites-faciles
# sert pour le menu qui est téléchargé depuis le site de gestion
CORS_ALLOWED_ORIGINS = [SITES_FACILES_BASE_URL]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = (*default_headers, "hx-current-url")

# Logging :
# permet un niveau de log 'INFO' pour le logger `logs.event`,
# qui est également réglable via variable d'environnement, si besoin
# (le reste de la configuration de logging par défaut n'est pas modifié).
# Concernant Django, avoir des logs visibles à certains point critiques
# de la configuration peut être une bonne idée.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "event": {"class": "logs.event.EventLogHandler"},
    },
    "loggers": {
        "django": {
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        "logs.event": {
            "level": os.getenv("EVENT_LOG_LEVEL", "INFO"),
            "handlers": ["event"],
        },
    },
}

# Profiling Metabase :
# temporaire le temps de voir comment améliorer globalement de temps de sync
# ou de refondre l'architecture de transfert de données.

# Permet l'affichage des temps d'éxecution de chaque partie de la synchro
METABASE_DEBUG_SYNC = os.getenv("METABASE_DEBUG_SYNC") == "true"
METABASE_DEBUG_SKIP_STEPS = os.getenv("METABASE_DEBUG_SKIP_STEPS", "").split(",")
METABASE_DEBUG_BULK_SIZE = int(os.getenv("METABASE_DEBUG_BULK_SIZE", 1000))

# Création des tables de travail metabase:
# nombre maximum de requêtes asynchrones simultanées
METABASE_NB_ASYNC_CALLS = int(os.getenv("METABASE_NB_ASYNC_CALLS", 100))

# ProConnect :
# On garde l'identification classique par modèle quoi qu'il advienne
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]
# Configuration des endpoints ProConnect
# Pointe par défaut sur la production, à modifier pour l'intégration (recette),
OIDC_PC_DOMAIN = os.getenv("OIDC_PC_DOMAIN", "auth.agentconnect.gouv.fr")
OIDC_PC_ISSUER = os.getenv("OIDC_PC_ISSUER", f"{OIDC_PC_DOMAIN}/api/v2")

# l'activation de ProConnect est configurable par variable d'environnement
OIDC_ENABLED = os.getenv("OIDC_ENABLED", "false") == "true"

if OIDC_ENABLED:
    MIDDLEWARE.append("oidc.middlewares.OIDCMiddleware")

# mentionné dans la documentation
OIDC_AUTH_REQUEST_EXTRA_PARAMS = {"acr_values": "eidas1"}

if OIDC_ENABLED:
    # ajoute OIDC comme mode possible d'identification
    AUTHENTICATION_BACKENDS += [
        "oidc.backends.CustomOIDCAuthenticationBackend",
    ]

# Authentication to support OIDC silent login flows via the 'silent' query parameter
OIDC_AUTHENTICATE_CLASS = "lasuite.oidc_login.views.OIDCAuthenticationRequestView"
OIDC_CALLBACK_CLASS = "lasuite.oidc_login.views.OIDCAuthenticationCallbackView"

# Required OIDC settings
OIDC_RP_CLIENT_ID = os.getenv("OIDC_RP_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = os.getenv("OIDC_RP_CLIENT_SECRET")
OIDC_RP_SCOPES = "openid given_name usual_name email siret custom uid"
OIDC_RP_SIGN_ALGO = "RS256"
# permet de stocker le token du FI pour pouvoir effectuer une déconnexion globale
OIDC_STORE_ID_TOKEN = True
# le token d'accès est stocké en session pour pouvoir accéder aux claims OIDC a posteriori
OIDC_STORE_ACCESS_TOKEN = True
ALLOW_LOGOUT_GET_METHOD = True

OIDC_OP_TOKEN_ENDPOINT = f"https://{OIDC_PC_ISSUER}/token"
OIDC_OP_USER_ENDPOINT = f"https://{OIDC_PC_ISSUER}/userinfo"
OIDC_OP_LOGOUT_ENDPOINT = f"https://{OIDC_PC_ISSUER}/session/end"
OIDC_OP_AUTHORIZATION_ENDPOINT = f"https://{OIDC_PC_ISSUER}/authorize"
OIDC_OP_JWKS_ENDPOINT = f"https://{OIDC_PC_ISSUER}/jwks"

# Optional settings
OIDC_USER_SUB_FIELD = (
    "sub"  # Field to store the OIDC subject identifier, defaults to "sub"
)

# pour l'affichage complet du mom de l'utilisateur
OIDC_USERINFO_FULLNAME_FIELDS = [
    "given_name",
    "usual_name",
]
# les éléments (claims) requis pour une identification/création de l'utilisateur sur le portail
OIDC_USERINFO_ESSENTIAL_CLAIMS = [
    "sub",
    "given_name",
    "usual_name",
    "siret",
    "email",
]
OIDC_FALLBACK_TO_EMAIL_FOR_IDENTIFICATION = (
    True  # Allow fallback to email for user identification
)
OIDC_CREATE_USER = (
    True  # Automatically create users if they don't exist, defaults to `True`
)
